"""
Telegram Bot for publishing F1 news
"""
import asyncio
from typing import List, Optional
import logging

from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

from ..models import ProcessedNewsItem, PublicationResult
from ..config import settings
from ..services.redis_service import redis_service
from ..database import db_manager

logger = logging.getLogger(__name__)

class F1NewsBot:
    """Telegram Bot for F1 news publication"""

    def __init__(self):
        self.bot: Optional[Bot] = None
        self.application: Optional[Application] = None
        self.channel_id = settings.telegram_channel_id
        self.pending_publications: List[ProcessedNewsItem] = []
        self._stop_event: asyncio.Event | None = None

    async def initialize(self) -> bool:
        """
        –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä—ã –∏ –æ—á–∏—â–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–π webhook.
        –ó–∞–ø—É—Å–∫ polling –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ self.run().
        """
        try:
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º (PTB v20+)
            self.application = (
                Application.builder()
                .token(settings.telegram_bot_token)
                .build()
            )
            self.bot = self.application.bot

            # –•—ç–Ω–¥–ª–µ—Ä—ã ‚Äî CallbackQueryHandler —Å—Ç–∞–≤–∏–º –ü–ï–†–í–´–ú
            self.application.add_handler(CallbackQueryHandler(self.button_callback))
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            self.application.add_handler(CommandHandler("queue", self.queue_command))
            self.application.add_handler(CommandHandler("publish", self.publish_command))
            self.application.add_handler(CommandHandler("view", self.view_command))

            # –°–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—ã–π webhook –∏ –¥—Ä–æ–ø–∞–µ–º –≤–∏—Å—è—â–∏–µ –∞–ø–¥–µ–π—Ç—ã,
            # —á—Ç–æ–±—ã polling –ø—Ä–∏–Ω–∏–º–∞–ª –í–°–ï —Ç–∏–ø—ã, –≤–∫–ª—é—á–∞—è callback_query
            await self.bot.delete_webhook(drop_pending_updates=True)

            # Try to resolve channel id (support @username or numeric id)
            await self._resolve_channel_id()

            logger.info("Telegram bot initialized successfully")
            return True

        except Exception as e:
            logger.error(f"Failed to initialize Telegram bot: {e}")
            return False

    async def run(self):
        """
        –ó–∞–ø—É—Å–∫ polling —Å —Ä—É—á–Ω—ã–º —Ü–∏–∫–ª–æ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º.
        """
        if not self.application:
            raise RuntimeError("Application is not initialized. Call initialize() first.")

        # –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Redis
        asyncio.create_task(self._redis_sync_loop())

        # –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª PTB –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await self.application.initialize()
        await self.application.start()

        # Safety: –æ—Å—Ç–∞–Ω–æ–≤–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–µ–∂–Ω–∏–π poller
        try:
            await self.application.updater.stop()
        except Exception:
            pass

        # –°—Ç–∞—Ä—Ç—É–µ–º polling
        await self.application.updater.start_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True,
        )

        # –ë–ª–æ–∫–∏—Ä—É–µ–º—Å—è –¥–æ —è–≤–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self._stop_event = asyncio.Event()
        try:
            await self._stop_event.wait()
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            try:
                await self.application.updater.stop()
            except Exception:
                pass
            await self.application.stop()
            await self.application.shutdown()

    async def _resolve_channel_id(self):
        """Resolve TELEGRAM_CHANNEL_ID to a numeric chat id and verify bot permissions."""
        try:
            raw = settings.telegram_channel_id
            # Prefer resolving via username or raw id
            chat = await self.bot.get_chat(raw)
            # For channels the id is negative and usually starts with -100
            self.channel_id = chat.id
            logger.info("Resolved channel '%s' -> chat_id=%s", str(raw), str(self.channel_id))
        except Exception as e:
            logger.error("Failed to resolve channel id '%s': %s", str(settings.telegram_channel_id), e)
            # Keep whatever is in self.channel_id; publish will surface a clear error

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_message = (
            "üèéÔ∏è F1 News Bot üèéÔ∏è\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ F1 –Ω–æ–≤–æ—Å—Ç–µ–π!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "/queue - –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            "/publish - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, "
            "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é AI –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –≤ –≤–∞—à –∫–∞–Ω–∞–ª."
        )
        await update.message.reply_text(welcome_message, parse_mode=None)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_message = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/queue - –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π (—Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)\n"
            "/view <–Ω–æ–º–µ—Ä> - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏\n"
            "/publish - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n\n"
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:\n"
            "1) –°–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS, Telegram –∫–∞–Ω–∞–ª–æ–≤, Reddit\n"
            "2) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é Ollama AI\n"
            "3) –ú–æ–¥–µ—Ä–∏—Ä—É–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            "4) –ü—É–±–ª–∏–∫—É–µ—Ç –≤ –≤–∞—à –∫–∞–Ω–∞–ª\n\n"
            "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ /queue –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º\n"
            "‚Ä¢ /view 1 –ø–æ–∫–∞–∂–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏\n"
            "‚Ä¢ –í—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã –∏ –æ–±–Ω–æ–≤–ª—è—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
        )
        await update.message.reply_text(help_message, parse_mode=None)


    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            status_message = (
                "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n"
                "üü¢ –°–±–æ—Ä—â–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π: –ê–∫—Ç–∏–≤–µ–Ω\n"
                "üü¢ AI –æ–±—Ä–∞–±–æ—Ç–∫–∞: –ê–∫—Ç–∏–≤–Ω–∞\n"
                "üü¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è: –ê–∫—Ç–∏–≤–Ω–∞\n"
                "üü¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –ê–∫—Ç–∏–≤–Ω–∞\n\n"
                "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                "‚Ä¢ –ù–æ–≤–æ—Å—Ç–µ–π —Å–æ–±—Ä–∞–Ω–æ: 0\n"
                "‚Ä¢ –ù–æ–≤–æ—Å—Ç–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0\n"
                "‚Ä¢ –ù–æ–≤–æ—Å—Ç–µ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: 0\n"
                "‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: 0\n\n"
                "‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –°–µ–π—á–∞—Å"
            )
            await update.message.reply_text(status_message, parse_mode=None)
        except Exception as e:
            logger.error(f"Error in status command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

    async def queue_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if not self.pending_publications:
                await update.message.reply_text("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
            page = 0
            if update.callback_query and update.callback_query.data:
                try:
                    page = int(update.callback_query.data.split('_')[1])
                except (IndexError, ValueError):
                    page = 0

            items_per_page = 5
            start_idx = page * items_per_page
            end_idx = start_idx + items_per_page
            total_items = len(self.pending_publications)
            total_pages = (total_items + items_per_page - 1) // items_per_page

            queue_message = f"üìã –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π (—Å—Ç—Ä. {page + 1}/{total_pages}):\n\n"
            
            for i, item in enumerate(self.pending_publications[start_idx:end_idx], start_idx + 1):
                queue_message += (
                    f"{i}. {item.title[:50]}...\n"
                    f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {item.source}\n"
                    f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {item.relevance_score:.2f}\n"
                    f"   –í–∞–∂–Ω–æ—Å—Ç—å: {item.importance_level}/5\n\n"
                )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = []
            if total_pages > 1:
                nav_buttons = []
                if page > 0:
                    nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"queue_{page-1}"))
                if page < total_pages - 1:
                    nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"queue_{page+1}"))
                if nav_buttons:
                    keyboard.append(nav_buttons)
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
                page_buttons = []
                for p in range(max(0, page-2), min(total_pages, page+3)):
                    if p == page:
                        page_buttons.append(InlineKeyboardButton(f"‚Ä¢{p+1}‚Ä¢", callback_data=f"queue_{p}"))
                    else:
                        page_buttons.append(InlineKeyboardButton(f"{p+1}", callback_data=f"queue_{p}"))
                if page_buttons:
                    keyboard.append(page_buttons)

            # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="queue_refresh")])

            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

            if update.callback_query:
                await update.callback_query.edit_message_text(
                    queue_message, 
                    parse_mode=None, 
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    queue_message, 
                    parse_mode=None, 
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"Error in queue command: {e}")
            if update.callback_query:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏")

    async def publish_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if not self.pending_publications:
                await update.message.reply_text("üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return

            next_item = self.pending_publications[0]
            message = self._format_news_message(next_item)

            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{next_item.id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{next_item.id}")
                ],
                [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{next_item.id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            logger.info(
                "Created keyboard for item %s with buttons: publish_%s, reject_%s, edit_%s",
                next_item.id, next_item.id, next_item.id, next_item.id
            )

            await update.message.reply_text(
                f"üì∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{message}",
                parse_mode=None,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error in publish command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

    async def view_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /view command - show detailed info about specific news item"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /view <–Ω–æ–º–µ—Ä>\n"
                    "–ü—Ä–∏–º–µ—Ä: /view 1 - –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏"
                )
                return

            try:
                item_number = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return

            if not self.pending_publications:
                await update.message.reply_text("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞")
                return

            if item_number < 1 or item_number > len(self.pending_publications):
                await update.message.reply_text(
                    f"‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(self.pending_publications)}"
                )
                return

            item = self.pending_publications[item_number - 1]
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üì∞ **–î–µ—Ç–∞–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏ #{item_number}:**\n\n"
            message += f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {item.title}\n\n"
            
            if item.summary:
                message += f"**–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n{item.summary}\n\n"
            
            if item.key_points:
                message += "**–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n"
                for i, point in enumerate(item.key_points, 1):
                    message += f"{i}. {point}\n"
                message += "\n"
            
            message += f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {item.source}\n"
            message += f"**URL:** {item.url}\n"
            message += f"**–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** {item.relevance_score:.2f}\n"
            message += f"**–í–∞–∂–Ω–æ—Å—Ç—å:** {item.importance_level}/5\n"
            message += f"**–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:** {item.sentiment}\n"
            
            if item.tags:
                message += f"**–¢–µ–≥–∏:** {', '.join(item.tags)}\n"
            
            message += f"**–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {item.published_at}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{item.id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{item.id}")
                ],
                [
                    InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{item.id}"),
                    InlineKeyboardButton("üìã –ö –æ—á–µ—Ä–µ–¥–∏", callback_data="queue_0")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                message, 
                parse_mode=None, 
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error in view command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ—Å—Ç–∏")


    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ï–¥–∏–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback_query —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("=== BUTTON CALLBACK TRIGGERED ===")
        query = update.callback_query
        try:
            await query.answer()  # –±—ã—Å—Ç—Ä–æ–µ ACK, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª ¬´–ø–æ–¥—É–º–∞–π—Ç–µ¬ª
            data = (query.data or "").strip()
            logger.info("Button callback received: %s", data)

            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: action –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å, item_id –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            parts = data.split("_", 1)
            action = parts[0]
            item_id = parts[1] if len(parts) == 2 else None
            logger.info("Parsed action='%s', item_id='%s'", action, item_id)

            if action == "publish" and item_id:
                await self._handle_publish(item_id, query)
            elif action == "reject" and item_id:
                await self._handle_reject(item_id, query)
            elif action == "edit" and item_id:
                await self._handle_edit(item_id, query)
            elif action == "queue":
                if item_id == "refresh":
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
                    await self.queue_command(update, context)
                else:
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    await self.queue_command(update, context)
            else:
                logger.warning("Unknown action or missing item_id: %s", data)
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        except Exception as e:
            logger.error("Error handling button callback: %s", e, exc_info=True)
            try:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
            except Exception:
                pass

    async def _handle_publish(self, item_id: str, query):
        try:
            item = next((it for it in self.pending_publications if it.id == item_id), None)
            if not item:
                await query.edit_message_text("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            result = await self.publish_to_channel(item)
            if result.success:
                # —É–¥–∞–ª—è–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
                self.pending_publications = [it for it in self.pending_publications if it.id != item_id]
                await query.edit_message_text("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {result.error_message}")
        except Exception as e:
            logger.error(f"Error handling publish: {e}", exc_info=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

    async def _handle_reject(self, item_id: str, query):
        try:
            self.pending_publications = [it for it in self.pending_publications if it.id != item_id]
            await query.edit_message_text("‚ùå –ù–æ–≤–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"Error handling reject: {e}", exc_info=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")

    async def _handle_edit(self, item_id: str, query):
        await query.edit_message_text("üìù –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    def _format_news_message(self, news_item: ProcessedNewsItem) -> str:
        message = f"üèéÔ∏è {news_item.title}\n\n"
        if news_item.summary:
            summary = news_item.summary[:200] + "..." if len(news_item.summary) > 200 else news_item.summary
            message += f"üìù {summary}\n\n"
        if news_item.key_points:
            message += "üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n"
            for point in news_item.key_points[:2]:
                message += f"‚Ä¢ {point}\n"
            message += "\n"
        message += f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {news_item.source}\n"
        message += f"üîó –ß–∏—Ç–∞—Ç—å: {news_item.url}"
        if news_item.tags:
            tags_str = " ".join([f"#{t.replace(' ', '_')}" for t in news_item.tags[:3]])
            message += f"\n\n{tags_str}"
        return message

    async def publish_to_channel(self, news_item: ProcessedNewsItem) -> PublicationResult:
        try:
            # Ensure channel id is numeric & resolved
            try:
                if isinstance(self.channel_id, str):
                    # Resolve again in case it changed
                    await self._resolve_channel_id()
            except Exception:
                pass
            message = self._format_news_message(news_item)
            sent = await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=None,
                disable_web_page_preview=False
            )
            await db_manager.mark_as_published(news_item.id)
            await redis_service.mark_news_as_published(news_item.id, sent.message_id)
            return PublicationResult(success=True, message_id=str(sent.message_id))
        except BadRequest as e:
            # Typical cause: wrong channel id or bot is not admin in the channel
            hint = ""
            if "chat not found" in str(e).lower():
                hint = " ‚Äî –ü—Ä–æ–≤–µ—Ä—å TELEGRAM_CHANNEL_ID (–∏—Å–ø–æ–ª—å–∑—É–π @username –ò–õ–ò —á–∏—Å–ª–æ–≤–æ–π -100XXXXXXXXXX) –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ (–¥–æ–±–∞–≤—å –≤ –∫–∞–Ω–∞–ª –∏ –¥–∞–π –ø—Ä–∞–≤–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å)."
            logger.error(f"Error publishing to channel: {e}")
            return PublicationResult(success=False, error_message=f"{e}{hint}")
        except Exception as e:
            logger.error(f"Error publishing to channel: {e}", exc_info=True)
            return PublicationResult(success=False, error_message=str(e))

    async def add_to_pending(self, news_item: ProcessedNewsItem):
        self.pending_publications.append(news_item)
        logger.info("Added to pending publications: %s...", news_item.title[:50])

    async def _redis_sync_loop(self):
        while True:
            try:
                redis_news = await redis_service.get_news_from_moderation_queue(limit=5)
                for news_item in redis_news:
                    if not any(item.id == news_item.id for item in self.pending_publications):
                        self.pending_publications.append(news_item)
                        logger.info("Added news to moderation queue from Redis: %s...", news_item.title[:50])
                await asyncio.sleep(30)
            except Exception as e:
                logger.error(f"Error in Redis sync loop: {e}", exc_info=True)
                await asyncio.sleep(60)


    async def stop(self):
        """
        –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å run_polling ‚Äî –æ–Ω —Å–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ç–æ–ø–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Å–ª—É—á–∞–π —è–≤–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—Å–∫–∞.
        """
        try:
            if self._stop_event and not self._stop_event.is_set():
                self._stop_event.set()
            if self.application:
                try:
                    await self.application.updater.stop()
                except Exception:
                    pass
                await self.application.stop()
                await self.application.shutdown()
        except Exception as e:
            logger.error(f"Error stopping bot: {e}", exc_info=True)
        logger.info("Telegram bot stopped")