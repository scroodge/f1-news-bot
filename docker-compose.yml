services:
  # Redis Cache - используется для межпроцессного взаимодействия
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # F1 News Bot - Main Application
  # Собирает новости и выполняет умную обработку:
  # - Русские новости: быстрая обработка без AI
  # - Иностранные новости: полная AI обработка с переводом
  f1-news-main:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://f1_user:f1_password@host.docker.internal:5432/f1_news
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - OLLAMA_MODEL=llama3:latest
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHANNEL_ID=${TELEGRAM_CHANNEL_ID}
      - TELEGRAM_ADMIN_ID=${TELEGRAM_ADMIN_ID}
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - TELEGRAM_PHONE=${TELEGRAM_PHONE}
      - RSS_FEEDS=${RSS_FEEDS}
      - TELEGRAM_CHANNELS=${TELEGRAM_CHANNELS}
      - MIN_RELEVANCE_SCORE=0.1
      - TIMEZONE=Europe/Moscow
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./telegram_session.session:/app/telegram_session.session
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: ["python", "start_local.py"]

  # F1 News Bot - Telegram Bot
  # Отдельный процесс для модерации и публикации новостей
  f1-news-telegram:
    build: .
    environment:
      - DATABASE_URL=postgresql://f1_user:f1_password@host.docker.internal:5432/f1_news
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - OLLAMA_MODEL=llama3:latest
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHANNEL_ID=${TELEGRAM_CHANNEL_ID}
      - TELEGRAM_ADMIN_ID=${TELEGRAM_ADMIN_ID}
      - TIMEZONE=Europe/Moscow
    depends_on:
      redis:
        condition: service_healthy
      f1-news-main:
        condition: service_started
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: ["python", "telegram_bot_standalone.py"]
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  redis_data:
